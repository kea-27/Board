<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">
	<!-- Appenders -->
	<!-- appender : 로그를 어디에 출력할지 결정하는 역할 -->
	<!-- 콘솔, 파일 기록, DB 저장 등 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<!-- encoder : 출력할 로그를 지정한 형식으로 변환하는 역할 -->
		<encoder> <!-- debug레벨 -->
			<Pattern>%d %5p [%c] %m%n</Pattern>
		</encoder>
	</appender>
	
	<appender name="console-infolog" class="ch.qos.logback.core.ConsoleAppender">
		<encoder> <!-- info레벨 -->
			<Pattern>%d %5p %m%n</Pattern>
		</encoder>
	</appender>
	
	<!-- 로거 -->
	<!-- logger : 로그를 출력하는 요소 -->
	<!-- level : 출력할 로그의 레벨을 조절하여 appender에 전달 -->
	<logger name="board" level="DEBUG" appender-ref="console"></logger>
	<!-- debug 레벨의 로그를 출력하는 형식은 name이 console인 appender 사용 -->
	
	<!-- Logback에서 사용되는 로그의 레벨 (가장 윗줄이 가장 낮은 레벨, 설정한 로그 레벨 이상의 로그만 출력)-->
	<!-- 
	  	trace : 모든 로그를 출력
		debug : 개발할 때 디버그 용도로 사용
		info : 상태 변경 등과 같은 정보성 메시지를 나타냄
		warn : 프로그램의 실행에는 문제가 없지만 추후 시스템 에러의 원인이 될 수 있다는 경고성 메시지를 의미함
		error : 요청을 처리하던 중 문제가 발생한 것을 의미함
	 -->
	 
	<logger name="jdbc.sqlonly" level="INFO" appender-ref="console-infolog"></logger>
	<logger name="jdbc.resultsettable" level="INFO" appender-ref="console-infolog"></logger>
	
	<!-- log4jdbc에서 제공하는 로거 -->
	<!-- 
		jdbc.sqlonly : SQL을 보여줌, Prepared statement의 경우 관련된 파라미터는 자동으로 변경되어 출력됨
		jdbc.sqltiming : SQL문과 해당 SQL문의 실행 시간을 밀리초 단위로 보여줌
		jdbc.audit : ResultSets를 제외한 모든 JDBC 호출 정보를 보여줌, 매우 많은 로그가 발생되기 때문에 JDBC 관련 문제를 추적하기 위한 것이 아니라면 일반적으로 사용하지 ㅇ낳음
		jdbc.resultset : ResultSets를 포함한 JDBC 호출 정보를 보여 주기 때문에 jdbc.audit보다 더 많은 로그가 생성됨
		jdbc.resulttable : SQL의 조회 결과를 테이블로 보여줌
		jdbc.connection : Connection의 연결과 종료에 관련된 로그를 보여줌, Connection 누수 문제를 해결하는데 도움이 됨
	 -->
	
	<!-- 루트 로거 -->
	<root level="off">
		<appender-ref ref="console"></appender-ref>
	</root>
</configuration>